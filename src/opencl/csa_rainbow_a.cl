#define KEYS_PER_THREAD 0x100
#define KEYS_PER_KERNEL (BLOCKS*THREADS*KEYS_PER_THREAD)
#define MAX_KEY_HITS_PER_KERNEL 100 
//first 4 bytes as int / rest for cw8 matches
#define MAX_ODATA_SIZE (4+(8*(MAX_KEY_HITS_PER_KERNEL)))
#define RAINBOW_CHAIN_LEN 0x10000
#define RAINBOW_CHAIN_LEN_PER_KERNEL	0x100	// cuda: 0x100	// 256
#define BLOCKS_RB	0x200						// cuda: 0x200 - 512
#define THREADS_RB	0x80 // 2					// cuda: 0x80 (128)
#define DVBCSA_DATA_SIZE	8
#define DVBCSA_KEYSBUFF_SIZE	56

//typedef uchar dvbcsa_block_t[DVBCSA_DATA_SIZE];
typedef uchar dvbcsa_keys_t[DVBCSA_KEYSBUFF_SIZE];

#if 1
//__device__	__shared__ static uint8_t csa_block_perm[256];
__constant uchar csa_block_perm[256] =
  {
    0x00, 0x02, 0x80, 0x82, 0x20, 0x22, 0xa0, 0xa2, 0x10, 0x12, 0x90, 0x92, 0x30, 0x32, 0xb0, 0xb2,
    0x04, 0x06, 0x84, 0x86, 0x24, 0x26, 0xa4, 0xa6, 0x14, 0x16, 0x94, 0x96, 0x34, 0x36, 0xb4, 0xb6,
    0x40, 0x42, 0xc0, 0xc2, 0x60, 0x62, 0xe0, 0xe2, 0x50, 0x52, 0xd0, 0xd2, 0x70, 0x72, 0xf0, 0xf2,
    0x44, 0x46, 0xc4, 0xc6, 0x64, 0x66, 0xe4, 0xe6, 0x54, 0x56, 0xd4, 0xd6, 0x74, 0x76, 0xf4, 0xf6,
    0x01, 0x03, 0x81, 0x83, 0x21, 0x23, 0xa1, 0xa3, 0x11, 0x13, 0x91, 0x93, 0x31, 0x33, 0xb1, 0xb3,
    0x05, 0x07, 0x85, 0x87, 0x25, 0x27, 0xa5, 0xa7, 0x15, 0x17, 0x95, 0x97, 0x35, 0x37, 0xb5, 0xb7,
    0x41, 0x43, 0xc1, 0xc3, 0x61, 0x63, 0xe1, 0xe3, 0x51, 0x53, 0xd1, 0xd3, 0x71, 0x73, 0xf1, 0xf3,
    0x45, 0x47, 0xc5, 0xc7, 0x65, 0x67, 0xe5, 0xe7, 0x55, 0x57, 0xd5, 0xd7, 0x75, 0x77, 0xf5, 0xf7,
    0x08, 0x0a, 0x88, 0x8a, 0x28, 0x2a, 0xa8, 0xaa, 0x18, 0x1a, 0x98, 0x9a, 0x38, 0x3a, 0xb8, 0xba,
    0x0c, 0x0e, 0x8c, 0x8e, 0x2c, 0x2e, 0xac, 0xae, 0x1c, 0x1e, 0x9c, 0x9e, 0x3c, 0x3e, 0xbc, 0xbe,
    0x48, 0x4a, 0xc8, 0xca, 0x68, 0x6a, 0xe8, 0xea, 0x58, 0x5a, 0xd8, 0xda, 0x78, 0x7a, 0xf8, 0xfa,
    0x4c, 0x4e, 0xcc, 0xce, 0x6c, 0x6e, 0xec, 0xee, 0x5c, 0x5e, 0xdc, 0xde, 0x7c, 0x7e, 0xfc, 0xfe,
    0x09, 0x0b, 0x89, 0x8b, 0x29, 0x2b, 0xa9, 0xab, 0x19, 0x1b, 0x99, 0x9b, 0x39, 0x3b, 0xb9, 0xbb,
    0x0d, 0x0f, 0x8d, 0x8f, 0x2d, 0x2f, 0xad, 0xaf, 0x1d, 0x1f, 0x9d, 0x9f, 0x3d, 0x3f, 0xbd, 0xbf,
    0x49, 0x4b, 0xc9, 0xcb, 0x69, 0x6b, 0xe9, 0xeb, 0x59, 0x5b, 0xd9, 0xdb, 0x79, 0x7b, 0xf9, 0xfb,
    0x4d, 0x4f, 0xcd, 0xcf, 0x6d, 0x6f, 0xed, 0xef, 0x5d, 0x5f, 0xdd, 0xdf, 0x7d, 0x7f, 0xfd, 0xff,
};

//static __local uchar csa_block_sbox[256];
//static __constant uchar const_csa_block_sbox[256] =
static __constant uchar csa_block_sbox[256] =
{
    0x3a, 0xea, 0x68, 0xfe, 0x33, 0xe9, 0x88, 0x1a, 0x83, 0xcf, 0xe1, 0x7f, 0xba, 0xe2, 0x38, 0x12,
    0xe8, 0x27, 0x61, 0x95, 0x0c, 0x36, 0xe5, 0x70, 0xa2, 0x06, 0x82, 0x7c, 0x17, 0xa3, 0x26, 0x49,
    0xbe, 0x7a, 0x6d, 0x47, 0xc1, 0x51, 0x8f, 0xf3, 0xcc, 0x5b, 0x67, 0xbd, 0xcd, 0x18, 0x08, 0xc9,
    0xff, 0x69, 0xef, 0x03, 0x4e, 0x48, 0x4a, 0x84, 0x3f, 0xb4, 0x10, 0x04, 0xdc, 0xf5, 0x5c, 0xc6,
    0x16, 0xab, 0xac, 0x4c, 0xf1, 0x6a, 0x2f, 0x3c, 0x3b, 0xd4, 0xd5, 0x94, 0xd0, 0xc4, 0x63, 0x62,
    0x71, 0xa1, 0xf9, 0x4f, 0x2e, 0xaa, 0xc5, 0x56, 0xe3, 0x39, 0x93, 0xce, 0x65, 0x64, 0xe4, 0x58,
    0x6c, 0x19, 0x42, 0x79, 0xdd, 0xee, 0x96, 0xf6, 0x8a, 0xec, 0x1e, 0x85, 0x53, 0x45, 0xde, 0xbb,
    0x7e, 0x0a, 0x9a, 0x13, 0x2a, 0x9d, 0xc2, 0x5e, 0x5a, 0x1f, 0x32, 0x35, 0x9c, 0xa8, 0x73, 0x30,
    0x29, 0x3d, 0xe7, 0x92, 0x87, 0x1b, 0x2b, 0x4b, 0xa5, 0x57, 0x97, 0x40, 0x15, 0xe6, 0xbc, 0x0e,
    0xeb, 0xc3, 0x34, 0x2d, 0xb8, 0x44, 0x25, 0xa4, 0x1c, 0xc7, 0x23, 0xed, 0x90, 0x6e, 0x50, 0x00,
    0x99, 0x9e, 0x4d, 0xd9, 0xda, 0x8d, 0x6f, 0x5f, 0x3e, 0xd7, 0x21, 0x74, 0x86, 0xdf, 0x6b, 0x05,
    0x8e, 0x5d, 0x37, 0x11, 0xd2, 0x28, 0x75, 0xd6, 0xa7, 0x77, 0x24, 0xbf, 0xf0, 0xb0, 0x02, 0xb7,
    0xf8, 0xfc, 0x81, 0x09, 0xb1, 0x01, 0x76, 0x91, 0x7d, 0x0f, 0xc8, 0xa0, 0xf2, 0xcb, 0x78, 0x60,
    0xd1, 0xf7, 0xe0, 0xb5, 0x98, 0x22, 0xb3, 0x20, 0x1d, 0xa6, 0xdb, 0x7b, 0x59, 0x9f, 0xae, 0x31,
    0xfb, 0xd3, 0xb6, 0xca, 0x43, 0x72, 0x07, 0xf4, 0xd8, 0x41, 0x14, 0x55, 0x0d, 0x54, 0x8b, 0xb9,
    0xad, 0x46, 0x0b, 0xaf, 0x80, 0x52, 0x2c, 0xfa, 0x8c, 0x89, 0x66, 0xfd, 0xb2, 0xa9, 0x9b, 0xc0,
};
#endif // 0

void memcpy(__local uchar * dst, __global const uchar * src, uint items)
{
	for (int i = 0; i < items; i++) {
		dst[i] = src[i];
	}
}

void KeySchedule07_Xor(__private uchar *ksfull, const __private uchar *Cw8)
{
	//contains cw0..7
	const uchar *cw = Cw8;

	ksfull[0] = 0 ^ (((cw[5] & 0x10) >> 4) | ((cw[6] & 0x40) >> 5) | ((cw[7] & 0x2) << 1) | ((cw[0] & 0x1) << 3) | (cw[1] & 0x10) | ((cw[7] & 0x10) << 1) | (cw[4] & 0x40) | ((cw[1] & 0x20) << 2));
	ksfull[1] = 0 ^ (((cw[2] & 0x10) >> 4) | (cw[6] & 0x2) | (cw[5] & 0x4) | ((cw[7] & 0x80) >> 4) | (cw[6] & 0x10) | (cw[3] & 0x20) | ((cw[4] & 0x1) << 6) | ((cw[1] & 0x2) << 6));
	ksfull[2] = 0 ^ (((cw[6] & 0x8) >> 3) | (cw[0] & 0x2) | ((cw[5] & 0x8) >> 1) | ((cw[3] & 0x80) >> 4) | ((cw[4] & 0x4) << 2) | ((cw[3] & 0x1) << 5) | ((cw[7] & 0x4) << 4) | ((cw[2] & 0x4) << 5));
	ksfull[3] = 0 ^ (((cw[3] & 0x2) >> 1) | ((cw[0] & 0x40) >> 5) | ((cw[2] & 0x80) >> 5) | (cw[0] & 0x8) | ((cw[7] & 0x20) >> 1) | ((cw[3] & 0x8) << 2) | ((cw[4] & 0x10) << 2) | ((cw[3] & 0x10) << 3));
	ksfull[4] = 0 ^ ((cw[2] & 0x1) | ((cw[5] & 0x1) << 1) | ((cw[2] & 0x20) >> 3) | ((cw[5] & 0x80) >> 4) | ((cw[4] & 0x20) >> 1) | ((cw[4] & 0x80) >> 2) | ((cw[1] & 0x4) << 4) | ((cw[5] & 0x2) << 6));
	ksfull[5] = 0 ^ (((cw[4] & 0x8) >> 3) | ((cw[0] & 0x4) >> 1) | (cw[6] & 0x4) | ((cw[0] & 0x10) >> 1) | ((cw[1] & 0x80) >> 3) | ((cw[6] & 0x1) << 5) | ((cw[2] & 0x8) << 3) | ((cw[3] & 0x40) << 1));
	ksfull[6] = 0 ^ (((cw[0] & 0x20) >> 5) | ((cw[3] & 0x4) >> 1) | ((cw[7] & 0x40) >> 4) | ((cw[2] & 0x2) << 2) | ((cw[6] & 0x20) >> 1) | ((cw[7] & 0x8) << 2) | ((cw[5] & 0x20) << 1) | ((cw[1] & 0x1) << 7));
	ksfull[7] = 0 ^ (((cw[4] & 0x2) >> 1) | ((cw[2] & 0x40) >> 5) | ((cw[1] & 0x8) >> 1) | ((cw[6] & 0x80) >> 4) | ((cw[7] & 0x1) << 4) | ((cw[1] & 0x40) >> 1) | ((cw[0] & 0x80) >> 1) | ((cw[5] & 0x40) << 1));

	ksfull[8] = 1 ^ (((cw[3] & 0x80) >> 7) | ((cw[0] & 0x8) >> 2) | ((cw[1] & 0x1) << 2) | (cw[2] & 0x8) | ((cw[6] & 0x40) >> 2) | ((cw[1] & 0x2) << 4) | ((cw[4] & 0x20) << 1) | ((cw[7] & 0x4) << 5));
	ksfull[9] = 1 ^ (((cw[4] & 0x2) >> 1) | ((cw[1] & 0x40) >> 5) | ((cw[5] & 0x2) << 1) | ((cw[3] & 0x1) << 3) | ((cw[5] & 0x20) >> 1) | ((cw[1] & 0x8) << 2) | (cw[7] & 0x40) | ((cw[7] & 0x20) << 2));
	ksfull[10] = 1 ^ (((cw[1] & 0x20) >> 5) | ((cw[3] & 0x8) >> 2) | ((cw[2] & 0x2) << 1) | ((cw[4] & 0x40) >> 3) | ((cw[5] & 0x1) << 4) | ((cw[5] & 0x80) >> 2) | ((cw[4] & 0x4) << 4) | ((cw[6] & 0x8) << 4));
	ksfull[11] = 1 ^ (((cw[3] & 0x40) >> 6) | ((cw[4] & 0x10) >> 3) | ((cw[2] & 0x1) << 2) | ((cw[5] & 0x40) >> 3) | ((cw[5] & 0x4) << 2) | ((cw[7] & 0x80) >> 2) | ((cw[1] & 0x10) << 2) | ((cw[1] & 0x4) << 5));
	ksfull[12] = 1 ^ (((cw[0] & 0x80) >> 7) | ((cw[2] & 0x80) >> 6) | ((cw[4] & 0x8) >> 1) | (cw[5] & 0x8) | (cw[6] & 0x10) | (cw[6] & 0x20) | ((cw[4] & 0x80) >> 1) | ((cw[7] & 0x8) << 4));
	ksfull[13] = 1 ^ (((cw[2] & 0x4) >> 2) | ((cw[6] & 0x80) >> 6) | (cw[0] & 0x4) | ((cw[0] & 0x2) << 2) | (cw[3] & 0x10) | ((cw[5] & 0x10) << 1) | (cw[0] & 0x40) | ((cw[0] & 0x10) << 3));
	ksfull[14] = 1 ^ (((cw[1] & 0x80) >> 7) | ((cw[4] & 0x1) << 1) | ((cw[7] & 0x2) << 1) | ((cw[3] & 0x20) >> 2) | ((cw[6] & 0x1) << 4) | (cw[0] & 0x20) | ((cw[0] & 0x1) << 6) | ((cw[7] & 0x1) << 7));
	ksfull[15] = 1 ^ (((cw[3] & 0x4) >> 2) | ((cw[2] & 0x10) >> 3) | ((cw[2] & 0x20) >> 3) | ((cw[7] & 0x10) >> 1) | ((cw[6] & 0x2) << 3) | ((cw[6] & 0x4) << 3) | (cw[2] & 0x40) | ((cw[3] & 0x2) << 6));

	ksfull[16] = 2 ^ (((cw[4] & 0x40) >> 6) | ((cw[5] & 0x40) >> 5) | ((cw[7] & 0x1) << 2) | ((cw[0] & 0x40) >> 3) | ((cw[0] & 0x8) << 1) | (cw[7] & 0x20) | ((cw[6] & 0x10) << 2) | ((cw[4] & 0x4) << 5));
	ksfull[17] = 2 ^ (((cw[3] & 0x4) >> 2) | ((cw[6] & 0x4) >> 1) | ((cw[7] & 0x8) >> 1) | ((cw[5] & 0x80) >> 4) | ((cw[0] & 0x1) << 4) | (cw[2] & 0x20) | ((cw[7] & 0x2) << 5) | ((cw[5] & 0x4) << 5));
	ksfull[18] = 2 ^ (((cw[7] & 0x4) >> 2) | ((cw[7] & 0x80) >> 6) | ((cw[3] & 0x20) >> 3) | ((cw[4] & 0x20) >> 2) | ((cw[2] & 0x80) >> 3) | ((cw[5] & 0x8) << 2) | ((cw[5] & 0x1) << 6) | ((cw[1] & 0x20) << 2));
	ksfull[19] = 2 ^ (((cw[0] & 0x10) >> 4) | ((cw[1] & 0x10) >> 3) | ((cw[0] & 0x80) >> 5) | ((cw[3] & 0x2) << 2) | ((cw[5] & 0x2) << 3) | ((cw[3] & 0x1) << 5) | (cw[6] & 0x40) | (cw[4] & 0x80));
	ksfull[20] = 2 ^ (((cw[2] & 0x40) >> 6) | ((cw[2] & 0x1) << 1) | (cw[2] & 0x4) | ((cw[2] & 0x2) << 2) | ((cw[5] & 0x20) >> 1) | ((cw[6] & 0x1) << 5) | ((cw[6] & 0x20) << 1) | ((cw[0] & 0x20) << 2));
	ksfull[21] = 2 ^ (((cw[6] & 0x8) >> 3) | ((cw[7] & 0x10) >> 3) | ((cw[6] & 0x80) >> 5) | (cw[3] & 0x8) | ((cw[1] & 0x4) << 2) | ((cw[3] & 0x80) >> 2) | ((cw[4] & 0x10) << 2) | ((cw[0] & 0x2) << 6));
	ksfull[22] = 2 ^ (((cw[3] & 0x10) >> 4) | ((cw[7] & 0x40) >> 5) | ((cw[1] & 0x1) << 2) | (cw[1] & 0x8) | (cw[5] & 0x10) | ((cw[1] & 0x80) >> 2) | ((cw[2] & 0x8) << 3) | ((cw[6] & 0x2) << 6));
	ksfull[23] = 2 ^ ((cw[4] & 0x1) | (cw[4] & 0x2) | ((cw[4] & 0x8) >> 1) | ((cw[1] & 0x2) << 2) | ((cw[1] & 0x40) >> 2) | ((cw[0] & 0x4) << 3) | ((cw[2] & 0x10) << 2) | ((cw[3] & 0x40) << 1));

	ksfull[24] = 3 ^ (((cw[4] & 0x20) >> 5) | (cw[3] & 0x2) | ((cw[6] & 0x2) << 1) | ((cw[4] & 0x10) >> 1) | ((cw[5] & 0x40) >> 2) | ((cw[5] & 0x4) << 3) | ((cw[5] & 0x20) << 1) | ((cw[5] & 0x1) << 7));
	ksfull[25] = 3 ^ ((cw[4] & 0x1) | ((cw[0] & 0x4) >> 1) | ((cw[0] & 0x20) >> 3) | (cw[5] & 0x8) | ((cw[2] & 0x8) << 1) | ((cw[4] & 0x8) << 2) | ((cw[1] & 0x1) << 6) | ((cw[5] & 0x2) << 6));
	ksfull[26] = 3 ^ (((cw[4] & 0x4) >> 2) | ((cw[3] & 0x1) << 1) | ((cw[1] & 0x8) >> 1) | ((cw[6] & 0x10) >> 1) | ((cw[2] & 0x1) << 4) | ((cw[2] & 0x2) << 4) | ((cw[2] & 0x80) >> 1) | ((cw[7] & 0x4) << 5));
	ksfull[27] = 3 ^ (((cw[0] & 0x2) >> 1) | ((cw[6] & 0x40) >> 5) | ((cw[2] & 0x40) >> 4) | ((cw[3] & 0x40) >> 3) | ((cw[7] & 0x8) << 1) | ((cw[5] & 0x80) >> 2) | ((cw[0] & 0x8) << 3) | ((cw[6] & 0x20) << 2));
	ksfull[28] = 3 ^ (((cw[2] & 0x10) >> 4) | ((cw[0] & 0x80) >> 6) | ((cw[6] & 0x8) >> 1) | ((cw[3] & 0x20) >> 2) | ((cw[0] & 0x1) << 4) | ((cw[5] & 0x10) << 1) | ((cw[6] & 0x1) << 6) | (cw[1] & 0x80));
	ksfull[29] = 3 ^ (((cw[1] & 0x20) >> 5) | (cw[1] & 0x2) | ((cw[7] & 0x10) >> 2) | ((cw[7] & 0x80) >> 4) | ((cw[4] & 0x80) >> 3) | ((cw[4] & 0x40) >> 1) | ((cw[1] & 0x10) << 2) | ((cw[3] & 0x8) << 4));
	ksfull[30] = 3 ^ (((cw[1] & 0x4) >> 2) | (cw[7] & 0x2) | ((cw[7] & 0x1) << 2) | ((cw[2] & 0x20) >> 2) | ((cw[3] & 0x80) >> 3) | ((cw[3] & 0x10) << 1) | (cw[0] & 0x40) | ((cw[1] & 0x40) << 1));
	ksfull[31] = 3 ^ (((cw[7] & 0x40) >> 6) | ((cw[3] & 0x4) >> 1) | (cw[2] & 0x4) | ((cw[7] & 0x20) >> 2) | ((cw[6] & 0x4) << 2) | ((cw[6] & 0x80) >> 2) | ((cw[4] & 0x2) << 5) | ((cw[0] & 0x10) << 3));

	ksfull[32] = 4 ^ (((cw[6] & 0x10) >> 4) | ((cw[3] & 0x40) >> 5) | ((cw[1] & 0x40) >> 4) | ((cw[1] & 0x10) >> 1) | ((cw[3] & 0x2) << 3) | ((cw[5] & 0x2) << 4) | ((cw[0] & 0x1) << 6) | (cw[2] & 0x80));
	ksfull[33] = 4 ^ (((cw[7] & 0x40) >> 6) | ((cw[6] & 0x80) >> 6) | ((cw[1] & 0x80) >> 5) | ((cw[2] & 0x2) << 2) | ((cw[0] & 0x40) >> 2) | ((cw[2] & 0x4) << 3) | ((cw[7] & 0x1) << 6) | ((cw[7] & 0x8) << 4));
	ksfull[34] = 4 ^ ((cw[5] & 0x1) | ((cw[5] & 0x80) >> 6) | ((cw[2] & 0x20) >> 3) | ((cw[5] & 0x20) >> 2) | ((cw[0] & 0x80) >> 3) | (cw[3] & 0x20) | ((cw[2] & 0x1) << 6) | ((cw[4] & 0x4) << 5));
	ksfull[35] = 4 ^ (((cw[3] & 0x8) >> 3) | ((cw[0] & 0x8) >> 2) | ((cw[2] & 0x10) >> 2) | ((cw[0] & 0x10) >> 1) | ((cw[0] & 0x20) >> 1) | ((cw[5] & 0x8) << 2) | (cw[5] & 0x40) | ((cw[6] & 0x1) << 7));
	ksfull[36] = 4 ^ (((cw[4] & 0x2) >> 1) | ((cw[2] & 0x40) >> 5) | ((cw[1] & 0x20) >> 3) | (cw[1] & 0x8) | ((cw[2] & 0x8) << 1) | ((cw[3] & 0x80) >> 2) | ((cw[5] & 0x10) << 2) | ((cw[3] & 0x10) << 3));
	ksfull[37] = 4 ^ (((cw[7] & 0x4) >> 2) | ((cw[7] & 0x20) >> 4) | ((cw[1] & 0x2) << 1) | ((cw[3] & 0x1) << 3) | ((cw[6] & 0x20) >> 1) | (cw[4] & 0x20) | (cw[6] & 0x40) | (cw[7] & 0x80));
	ksfull[38] = 4 ^ (((cw[4] & 0x80) >> 7) | ((cw[1] & 0x1) << 1) | ((cw[6] & 0x2) << 1) | (cw[4] & 0x8) | ((cw[4] & 0x40) >> 2) | ((cw[1] & 0x4) << 3) | ((cw[4] & 0x10) << 2) | ((cw[6] & 0x4) << 5));
	ksfull[39] = 4 ^ (((cw[7] & 0x2) >> 1) | ((cw[4] & 0x1) << 1) | ((cw[6] & 0x8) >> 1) | ((cw[5] & 0x4) << 1) | ((cw[0] & 0x4) << 2) | ((cw[7] & 0x10) << 1) | ((cw[3] & 0x4) << 4) | ((cw[0] & 0x2) << 6));

	ksfull[40] = 5 ^ (((cw[5] & 0x20) >> 5) | ((cw[0] & 0x10) >> 3) | (cw[6] & 0x4) | ((cw[6] & 0x40) >> 3) | ((cw[3] & 0x40) >> 2) | ((cw[7] & 0x8) << 2) | ((cw[2] & 0x8) << 3) | ((cw[2] & 0x1) << 7));
	ksfull[41] = 5 ^ (((cw[7] & 0x2) >> 1) | ((cw[7] & 0x10) >> 3) | ((cw[3] & 0x10) >> 2) | ((cw[3] & 0x20) >> 2) | (cw[4] & 0x10) | ((cw[6] & 0x8) << 2) | ((cw[6] & 0x2) << 5) | ((cw[0] & 0x20) << 2));
	ksfull[42] = 5 ^ (((cw[2] & 0x80) >> 7) | ((cw[5] & 0x8) >> 2) | ((cw[4] & 0x8) >> 1) | ((cw[0] & 0x1) << 3) | ((cw[2] & 0x40) >> 2) | ((cw[1] & 0x8) << 2) | ((cw[0] & 0x80) >> 1) | ((cw[5] & 0x1) << 7));
	ksfull[43] = 5 ^ (((cw[7] & 0x80) >> 7) | ((cw[5] & 0x40) >> 5) | ((cw[4] & 0x2) << 1) | ((cw[0] & 0x2) << 2) | ((cw[1] & 0x80) >> 3) | ((cw[2] & 0x2) << 4) | ((cw[3] & 0x2) << 5) | ((cw[5] & 0x10) << 3));
	ksfull[44] = 5 ^ (((cw[3] & 0x4) >> 2) | ((cw[2] & 0x10) >> 3) | (cw[7] & 0x4) | ((cw[2] & 0x20) >> 2) | ((cw[0] & 0x40) >> 2) | ((cw[4] & 0x40) >> 1) | ((cw[3] & 0x80) >> 1) | ((cw[1] & 0x4) << 5));
	ksfull[45] = 5 ^ (((cw[4] & 0x4) >> 2) | ((cw[5] & 0x4) >> 1) | ((cw[7] & 0x20) >> 3) | ((cw[5] & 0x80) >> 4) | ((cw[6] & 0x1) << 4) | ((cw[6] & 0x10) << 1) | ((cw[0] & 0x8) << 3) | ((cw[3] & 0x1) << 7));
	ksfull[46] = 5 ^ (((cw[6] & 0x20) >> 5) | ((cw[7] & 0x1) << 1) | ((cw[1] & 0x40) >> 4) | ((cw[2] & 0x4) << 1) | ((cw[4] & 0x20) >> 1) | ((cw[4] & 0x80) >> 2) | ((cw[1] & 0x10) << 2) | ((cw[0] & 0x4) << 5));
	ksfull[47] = 5 ^ ((cw[1] & 0x1) | ((cw[7] & 0x40) >> 5) | ((cw[1] & 0x20) >> 3) | ((cw[5] & 0x2) << 2) | ((cw[6] & 0x80) >> 3) | ((cw[1] & 0x2) << 4) | ((cw[4] & 0x1) << 6) | ((cw[3] & 0x8) << 4));

	ksfull[48] = 6 ^ cw[0];
	ksfull[49] = 6 ^ cw[1];
	ksfull[50] = 6 ^ cw[2];
	ksfull[51] = 6 ^ cw[3];
	ksfull[52] = 6 ^ cw[4];
	ksfull[53] = 6 ^ cw[5];
	ksfull[54] = 6 ^ cw[6];
	ksfull[55] = 6 ^ cw[7];
}

void dvbcsa_block_encrypt_data_only(
//	__global const uchar * restrict __const csa_block_perm,
//	__global const uchar * restrict __const csa_block_sbox,
	const dvbcsa_keys_t key, __private ulong *data)
{
	uint i = 0;

	while (i < DVBCSA_KEYSBUFF_SIZE)
	{
		ulong	L;
		ulong	S;

		S = csa_block_sbox[key[i] ^ data[7]];

		L = data[1];

		data[1] = data[2] ^ data[0];
		data[2] = data[3] ^ data[0];
		data[3] = data[4] ^ data[0];
		data[4] = data[5];
		data[5] = data[6] ^ csa_block_perm[S];
		data[6] = data[7];
		data[7] = data[0] ^ S;

		data[0] = L;

		i++;
	}
}

#define WORKSIZE 256

//__global const uchar * restrict __const iArray,
//__global uchar *oArray, __const ulong count
//	__attribute__((reqd_work_group_size(WORKSIZE, 1, 1)))
//volatile 
__kernel 
 //__attribute__((reqd_work_group_size(WORKSIZE, 1, 1)))
 void k_csa_rainbow_a(
	const ulong count,
//	__global const uchar * restrict __const csa_block_perm, // csa_block_perm
//	__global const uchar * restrict __const block_sbox, // block_sbox
	__global const uchar * restrict __const iArray,
	__global uchar *oArray )
{
	__private uchar Cw[8];
	//ulong dwCw;
	//int Offset;

	//int grp_id = get_group_id(0);
	//int lcl_id = get_local_id(0);
	int Offset = (get_group_id(0) * THREADS_RB) + get_local_id(0);
	//Offset = get_global_id(0);

	//printf("Offset: %d - count: %d\n", Offset, count );
	//return ;

	//memcpy( csa_block_sbox, const_csa_block_sbox, sizeof(csa_block_sbox) );
	//barrier( CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE );

	//6 -> 8
	//const
	__global uchar *Cw6;
	Cw6 = &iArray[Offset * 6];
	Cw[0] = Cw6[0];
	Cw[1] = Cw6[1];
	Cw[2] = Cw6[2];
	Cw[3] = Cw6[0] + Cw6[1] + Cw6[2];
	Cw[4] = Cw6[3];
	Cw[5] = Cw6[4];
	Cw[6] = Cw6[5];
	Cw[7] = Cw6[3] + Cw6[4] + Cw6[5];

	int i,
	    RoundNr;

	__private ulong data[8];

	for(RoundNr=count; RoundNr<(count+RAINBOW_CHAIN_LEN_PER_KERNEL); RoundNr++)
	{
		__private uchar ksfull[7*8];
		
		KeySchedule07_Xor(ksfull, Cw);

		//plain input
		for(i=0; i<8; i++)
		{
			data[i] = 0;
		}

		// Enc
		for(i=0; i<23; i++)
		{
			//dvbcsa_block_encrypt_data_only(csa_block_perm,
			//	block_sbox, ksfull, data);
			dvbcsa_block_encrypt_data_only(ksfull, data);
		}

		//Reduction part 2 (XOR RoundNr)
		data[2] ^= ((RoundNr >> 24) & 0xFF);
		data[3] ^= ((RoundNr >> 16) & 0xFF);
		data[4] ^= ((RoundNr >> 8) & 0xFF);
		data[5] ^= (RoundNr & 0xFF);

		//checksum
		Cw[0] = data[0];
		Cw[1] = data[1];
		Cw[2] = data[2];
		Cw[3] = data[0] + data[1] + data[2];
		Cw[4] = data[3];
		Cw[5] = data[4];
		Cw[6] = data[5];
		Cw[7] = data[3] + data[4] + data[5];
	}

	for(i=0; i<6; i++)
	{
		oArray[(Offset * 6) + i] = data[i];
	}
}
